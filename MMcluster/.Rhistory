V <-data$V
Z <- data$Z
theta <- data$theta
mu <-data$mu
Sigma <-data$Sigma
vk<-data$vk
Omega<-data$Omega
ldu<-rep(0, num_sim)
lld<-rep(0, num_sim)
for ( i in 1: num_sim){
rho[,1]<-runif(K)
rho[,1]<-rho[,1]/sum(rho[,1])
ldu[i]<- nnm_post(mu, Sigma, rho[,1], y, V, theta, Z, vk, Omega)
lld[i] <- rho.post(Z, rho[,1])
}
difference <- lld-ldu
# iterate through all values of difference and make sure
# they are equal to the first value
for (diff_i in difference) {
test_that("rho posterior", {
expect_equal(diff_i, difference[1])
})
}
source('~/R/myPkgs/MMcluster/tests/testthat/test-update-functions.R', echo=TRUE)
source('~/R/myPkgs/MMcluster/tests/testthat/test-update-functions.R', echo=TRUE)
#' Random sampling from the Dirichlet distribution.
#'
#'
#' @param n Number of random draws.
#' @param alpha Weight parameter: a vector of nonnegative entries.
#' @return A matrix of size `n x length(alpha)` of which each row is a random draw.
rdirichlet <- function(n, alpha) {
K <- length(alpha) # number of categories
X <- matrix(rgamma(n*K, shape = alpha), K, n)
drop(t(sweep(X, 2, colSums(X), "/")))
}
#' Sample from a categorical distribution.
#'
#'
#' Performs one draw from a categorical distribution (i.e., a multinomial distribution with size `n = 1`) for each of multiple probability vectors.
#'
#' @param prob An `n_cat x n_prob` matrix of probability vectors, each of which is a column of `prob`.  The entries of `prob` must be nonnegative, but are internally normalized such that each column sums to one.
#' @return A vector of length `n_prob` of integers between 1 and `n_cat` indicating the category draw for each column of `prob`.
rcategorical <- function(prob) {
if(any(prob < 0)) stop("prob must contain only nonnegative entries.")
cprob <- apply(prob, 2, cumsum)
u <- runif(ncol(prob)) * cprob[nrow(prob),]
apply(sweep(cprob, 2, u) >= 0, 2, which.max)
}
#'
#'
#' Calculates `y = V^{-1} x` where `V` is a variance matrix.
#'
#' @param V Variance matrix.
#' @param x Optional vector or matrix for which to solve system of equations.  If missing calculates inverse matrix.
#' @param ldV Optionally compute log determinant as well.
#'
#' @return Either a matrix or vector `y = V^{-1} x`, or if `ldV = TRUE`, a list with elements `y` and `ldV = log(det(V))`.
#' @details This function is faster and more stable than `base::solve()` when `V` is known to be positive-definite.
solveV <- function(V, x, ldV = FALSE) {
C <- chol(V) # cholesky decomposition
if(missing(x)) x <- diag(nrow(V))
# solve is O(ncol(C) * ncol(x)) with triangular matrices
# using backward subsitution
ans <- backsolve(r = C, x = backsolve(r = C, x = x, transpose = TRUE))
if(ldV) {
ldV <- 2 * sum(log(diag(C)))
ans <- list(y = ans, ldV = ldV)
}
ans
}
source('~/R/myPkgs/MMcluster/tests/testthat/test-update-functions.R', echo=TRUE)
source('~/R/myPkgs/MMcluster/tests/testthat/test-update-functions.R', echo=TRUE)
devtools::install()
testthat::test_package("MMcluster", reporter = "progress")
devtools::install()
library(MMcluster)
MMcluster()
devtools::document()
testthat::test_package("MMcluster", reporter = "progress")
devtools::install()
testthat::test_package("MMcluster")
?MMcluster
devtools::document()
?MMcluster
devtools::document()
?MMcluster
devtools::document()
?MMcluster
?mniw
devtools::document()
?MMcluster
devtools::document()
?MMcluster
devtools::document()
?MMcluster
devtools::document()
?MMcluster
?`numDeriv-package`
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
setwd("~/GitHub")
hbe_fit <- readRDS("hbe-fbm_fit_v1.rds")
hbe_fit <- readRDS("hbe-fbm_fit_v1.rds")
N <- length(hbe_fit)
p <- length(hbe_fit[[1]]$coef)
# Extract data
wts <- vector(length=N)
theta_hat <- matrix(nrow=N, ncol=p)
obs_info <- array(dim=c(p, p, N))
for (i in 1:N){
theta_hat[i, ] <- hbe_fit[[i]]$coef
wts[i] <- hbe_fit[[i]]$wt
obs_info[, , i] <- hbe_fit[[i]]$vcov
}
# Transform the wts into numeric labels
lab <- unique(wts)
K <- length(lab)
cluster <- numeric(length=N)
for (i in 1:N){
if (wts[i] == lab[1]){
cluster[i] <- 1
}
else if (wts[i] == lab[2]){
cluster[i] <- 2
}
else if (wts[i] == lab[3]){
cluster[i] <- 3
}
else if (wts[i] == lab[4]){
cluster[i] <- 4
}
else if (wts[i] == lab[5]){
cluster[i] <- 5
}
else{
cluster[i] <- 6
}
}
real_N_k <- numeric(length=K)
for (k in 1:K){
real_N_k[k] <- sum(cluster == k)
}
theta_hat
?devtools::use_data
?data.frame
N <- length(hbe_fit)
p <- length(hbe_fit[[1]]$coef)
# Extract data
wts <- vector(length=N)
theta_hat <- matrix(nrow=N, ncol=p)
obs_info <- array(dim=c(p, p, N))
for (i in 1:N){
theta_hat[i, ] <- hbe_fit[[i]]$coef
wts[i] <- hbe_fit[[i]]$wt
obs_info[, , i] <- hbe_fit[[i]]$vcov
}
# Transform the wts into numeric labels
lab <- unique(wts)
K <- length(lab)
cluster <- numeric(length=N)
for (i in 1:N){
if (wts[i] == lab[1]){
cluster[i] <- 1
}
else if (wts[i] == lab[2]){
cluster[i] <- 2
}
else if (wts[i] == lab[3]){
cluster[i] <- 3
}
else if (wts[i] == lab[4]){
cluster[i] <- 4
}
else if (wts[i] == lab[5]){
cluster[i] <- 5
}
else{
cluster[i] <- 6
}
}
real_N_k <- numeric(length=K)
for (k in 1:K){
real_N_k[k] <- sum(cluster == k)
}
colnames(theta_hat) <- names(hbe_fit[[1]]$coef)
data.frame(cbind(theta_hat, cluster))
weights <- clusters
weights <- cluster
hbe <- data.frame(cbind(theta_hat, weights))
setwd("~/R/myPkgs/MMcluster")
devtools::use_data(hbe, obs_info)
?devtools
library(devtools)
use_data(hbe,obs_info)
names(hbe)
lab
hbe <- data.frame(cbind(theta_hat, wts))
use_data(hbe,obs_info)
use_data(hbe,obs_info, overwrite = TRUE)
devtools::document()
devtools::install()
devtools::check()
usethis::use_package_doc()
devtools::check()
?rgamma
?runif
?mniw
?var
devtools::document()
devtools::check()
?mod
devtools::document()
check()
usethis::use_gpl3_license()
?usethis::use_gpl3_license()
?usethis::use_gpl3_license(name = "Gregory Reid; José Dairo; Mark Christopher Uy; Thomas Yan")
?usethis::use_gpl3_license(name = "Gregory Reid; José Dairo; Mark Christopher Uy; Thomas Yan")
?
m
usethis::use_gpl3_license(name = "Gregory Reid; José Dairo; Mark Christopher Uy; Thomas Yan")
names(hbe)
document()
check()
document()
check()
summary(hbe)
document()
check()
document()
check()
?usethis::use_gpl3_license()
?hbe
document
document()
?hbe
document()
?hbe
document
document()
?hbe
document
document()
check()
build()
?usethis::use_gpl3_license
document
document()
document()
document
document()
document()
check()
check()
build()
devtools::install()
library(MMcluster)
?`MMcluster-package`
devtools::document()
?`MMcluster-package`
devtools::document()
?`MMcluster-package`
devtools::check()
devtools::build()
setwd("~/R/myPkgs/MMcluster")
setwd("~/GitHub")
hbe_fit <- readRDS("hbe-fbm_fit_v1.rds")
n <- length(hbe_fit)
p <- 6
theta <- matrix(nrow = n, ncol = p)
V <- array(dim = c(p,p,n))
for (ii in 1:n) {
theta[ii,] <- hbe_fit[[ii]]$coef
V[,,ii] <- hbe_fit[[ii]]$vcov
}
colnames(theta) <- names(hbe_fit[[1]]$coef)
theta <- matrix(nrow = n, ncol = p)
V <- array(dim = c(p,p,n))
for (ii in 1:n) {
theta[ii,] <- c(hbe_fit[[ii]]$coef, hbe_fit[[ii]]$wt)
V[,,ii] <- hbe_fit[[ii]]$vcov
}
p <- 7
theta <- matrix(nrow = n, ncol = p)
V <- array(dim = c(p,p,n))
for (ii in 1:n) {
theta[ii,] <- c(hbe_fit[[ii]]$coef, hbe_fit[[ii]]$wt)
V[,,ii] <- hbe_fit[[ii]]$vcov
}
p <- 6
theta <- matrix(nrow = n, ncol = p + 1)
V <- array(dim = c(p,p,n))
for (ii in 1:n) {
theta[ii,] <- c(hbe_fit[[ii]]$coef, hbe_fit[[ii]]$wt)
V[,,ii] <- hbe_fit[[ii]]$vcov
}
colnames(theta) <- names(hbe_fit[[1]]$coef)
colnames(theta) <- c(names(hbe_fit[[1]]$coef), names(hbe_fit[[1]]$wt))
colnames(theta) <- c(names(hbe_fit[[1]]$coef), "wts")
theta
typeof(theta$kappa[1])
theta <- data.frame(theta)
theta$kappa
hbe[[1]]$coef
hbe_fit[[1]]$coef
typeof(hbe_fit[[1]]$coef)
typeof(c(hbe_fit[[1]]$coef)
)
c(hbe_fit[[1]]$coef)
for (ii in 1:n) {
theta[ii,] <- c(hbe_fit[[ii]]$coef, hbe_fit[[ii]]$wt)
V[,,ii] <- hbe_fit[[ii]]$vcov
}
theta
?data.frame
typeof(theta[1,])
theta
typeof(theta)
dim(theta)
theta[,4]
for (ii in 1:n) {
for(jj in 1:p) {
theta[ii,jj] <- hbe_fit[[ii]][jj]
V[,,ii] <- hbe_fit[[ii]]$vcov
}
}
p <- 6
theta <- matrix(nrow = n, ncol = p + 1)
V <- array(dim = c(p,p,n))
for (ii in 1:n) {
for(jj in 1:p) {
theta[ii,jj] <- hbe_fit[[ii]][jj]
V[,,ii] <- hbe_fit[[ii]]$vcov
}
}
for (ii in 1:n) {
for(jj in 1:p) {
theta[ii,jj] <- hbe_fit[[ii]]$coef[jj]
V[,,ii] <- hbe_fit[[ii]]$vcov
}
}
hbe_fit[[ii]]$coef[1]
hbe_fit[[ii]]$coef[2]
theta <- matrix(nrow = n, ncol = p + 1)
V <- array(dim = c(p,p,n))
for (ii in 1:n) {
for(jj in 1:p) {
theta[ii,jj] <- hbe_fit[[ii]]$coef[jj]
}
}
V <- array(dim = c(p,p,n))
for (ii in 1:n) {
for(jj in 1:p) {
theta[ii,jj] <- hbe_fit[[ii]]$coef[jj]
V[,,ii] <- hbe_fit[[ii]]$vcov
}
}
p <- 6
theta <- matrix(nrow = n, ncol = p + 1)
V <- array(dim = c(p,p,n))
for (ii in 1:n) {
for(jj in 1:p) {
theta[ii,jj] <- hbe_fit[[ii]]$coef[jj]
V[,,ii] <- hbe_fit[[ii]]$vcov
}
}
colnames(theta) <- c(names(hbe_fit[[1]]$coef), "wts")
theta
theta <- matrix(nrow = n, ncol = p)
V <- array(dim = c(p,p,n))
for (ii in 1:n) {
for(jj in 1:p) {
theta[ii,jj] <- hbe_fit[[ii]]$coef[jj]
V[,,ii] <- hbe_fit[[ii]]$vcov
}
}
theta[1,]
theta[,2]
theta <- data.frame(theta)
colnames(theta) <- c(names(hbe_fit[[1]]$coef))
theta <- data.frame(theta)
theta$kappa
gibbsHBE <- gibbsSampler(data = theta, V = V, burnin_period = 1000, numIter = 10000, K = 6, Theta.out = TRUE)
source('nnm-functions.R')
source('gibbs-wrapper.R')
gibbsHBE <- gibbsSampler(data = theta, V = V, burnin_period = 1000, numIter = 10000, K = 6, Theta.out = TRUE)
gibbsHBE <- gibbsSampler(data = theta, V = V, burnin_period = 1000, numIter = 10000, K = 6, Theta.out = TRUE)
p <- 6
theta <- matrix(nrow = n, ncol = p)
V <- array(dim = c(p,p,n))
for (ii in 1:n) {
for(jj in 1:p) {
theta[ii,jj] <- hbe_fit[[ii]]$coef[jj]
V[,,ii] <- hbe_fit[[ii]]$vcov
}
}
colnames(theta) <- c(names(hbe_fit[[1]]$coef))
gibbsHBE <- gibbsSampler(data = theta, V = V, burnin_period = 1000, numIter = 10000, K = 6, Theta.out = TRUE)
debug(gibbsSampler)
gibbsHBE <- gibbsSampler(data = theta, V = V, burnin_period = 1000, numIter = 10000, K = 6, Theta.out = TRUE)
setwd("~/GitHub/Group4")
source('nnm-functions.R')
source('gibbs-wrapper.R')
gibbsHBE <- gibbsSampler(data = theta, V = V, burnin_period = 1000, numIter = 10000, K = 6, Theta.out = TRUE)
hbe <- hbe_fit
usethis::use_data(hbe)
setwd("~/R/myPkgs/MMcluster")
usethis::use_data(hbe)
hbe<- hbe
usethis::use_data(hbe)
devtools::document()
usethis::use_data(hbe)
devtools::install()
setwd("~/R/myPkgs/MMcluster")
hbe <- readRDS("hbe-fbm_fit_v1.rds")
usethis::use_data(hbe)
hbe <- readRDS("hbe-fbm_fit_v1.rds")
usethis::use_data(hbe)
usethis::use_data(hbe, overwrite = TRUE)
devtools::document()
devtools::install()
library(MMcluster)
libHBE <- MMcluster(data = theta, V = V, burnin_period = 1000, numIter = 10000, K = 6, Theta.out = FALSE)
hbe_fit <- readRDS("hbe-fbm_fit_v1.rds")
n <- length(hbe_fit)
p <- 6
theta <- matrix(nrow = n, ncol = p)
V <- array(dim = c(p,p,n))
for (ii in 1:n) {
for(jj in 1:p) {
theta[ii,jj] <- hbe_fit[[ii]]$coef[jj]
V[,,ii] <- hbe_fit[[ii]]$vcov
}
}
colnames(theta) <- c(names(hbe_fit[[1]]$coef))
theta <- data.frame(theta)
hbe_fit <- hbe
n <- length(hbe_fit)
p <- 6
theta <- matrix(nrow = n, ncol = p)
V <- array(dim = c(p,p,n))
for (ii in 1:n) {
for(jj in 1:p) {
theta[ii,jj] <- hbe_fit[[ii]]$coef[jj]
V[,,ii] <- hbe_fit[[ii]]$vcov
}
}
colnames(theta) <- c(names(hbe_fit[[1]]$coef))
libHBE <- MMcluster(data = theta, V = V, burnin_period = 1000, numIter = 10000, K = 6, Theta.out = FALSE)
5 %% 5
5 %%4
400 %% 200
devtools::install()
library(MMcluster)
libHBE <- MMcluster(data = theta, V = V, burnin_period = 1000, numIter = 10000, K = 6, Theta.out = FALSE)
?paste0
devtools::install()
library(MMcluster)
libHBE <- MMcluster(data = theta, V = V, burnin_period = 1000, numIter = 10000, K = 6, Theta.out = FALSE)
devtools::install()
library(MMcluster)
libHBE <- MMcluster(data = theta, V = V, burnin_period = 1000, numIter = 10000, K = 6, Theta.out = FALSE)
gibbsHBE <- gibbsSampler(data = theta, V = V, burnin_period = 1000, numIter = 10000, K = 6, Theta.out = TRUE)
libHBE$Lambda
for (ii in 1:N) {
libClust[ii] <- which.max(libHBE$Lambda[ii,])
}
n <- length(hbe_fit)
libClust <- numberical(length = n)
for (ii in 1:n) {
libClust[ii] <- which.max(libHBE$Lambda[ii,])
}
libClust <- numerical(length = n)
libClust <- numeric(length = n)
for (ii in 1:n) {
libClust[ii] <- which.max(libHBE$Lambda[ii,])
}
table(libClust)
table(hbe$wt)
table(hbe$wts)
for (ii in 1:n) {
for(jj in 1:p) {
theta[ii,jj] <- hbe_fit[[ii]]$coef[jj]
V[,,ii] <- hbe_fit[[ii]]$vcov
wts[ii] <- hbe_fit[[ii]]$wt
}
}
wts <- numeric(length = n)
for (ii in 1:n) {
for(jj in 1:p) {
theta[ii,jj] <- hbe_fit[[ii]]$coef[jj]
V[,,ii] <- hbe_fit[[ii]]$vcov
wts[ii] <- hbe_fit[[ii]]$wt
}
}
table(libClust)
table(hbe_fit$wts)
table(wts)
which(wts == 5)
which(libClust == 1)
which(wts == 4)
which(libClust == 2)
devtools::document()
devtools::build()
devtools::check()
